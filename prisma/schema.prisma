datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "fullTextSearch"]
}

enum Role {
  UNASSIGNED
  COACH
  ATHLETE
  ADMIN
}

enum Sport {
  WEIGHTLIFTING
  POWERLIFTING
  BODYBUILDING
  BODYWEIGHT
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  userType      Role      @default(UNASSIGNED)
  athleteId     Athlete?  @relation("athleteId")
  coachId       Coach?    @relation("coachId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id       String    @id @default(cuid())
  coachId  String    @unique
  athletes Athlete[] @relation("athletes")
  name     String

  coach   Coach     @relation(fields: [coachId], references: [id])
  Program Program[]
}

model Coach {
  id       String    @id @default(cuid())
  userId   String    @unique
  teams    Team[]
  athletes Athlete[] @relation("athletes")
  programs Program[]

  user User @relation("coachId", fields: [userId], references: [id])
}

model Athlete {
  id      String @id @default(cuid())
  userId  String @unique
  teamId  String
  coachId String

  user    User      @relation("athleteId", fields: [userId], references: [id])
  team    Team      @relation("athletes", fields: [teamId], references: [id])
  coach   Coach     @relation("athletes", fields: [coachId], references: [id])
  Program Program[]
}

model Program {
  id        String   @id @default(cuid())
  coach     Coach    @relation(fields: [coachId], references: [id])
  athete    Athlete? @relation(fields: [athleteId], references: [id])
  team      Team?    @relation(fields: [teamId], references: [id])
  sport     Sport
  coachId   String
  athleteId String?
  teamId    String?
  Week      Week[]
  Day       Day[]
}

model Week {
  id        Int     @id
  program   Program @relation(fields: [programId], references: [id])
  days      Day[]
  programId String
}

model Day {
  id      Int     @id
  program Program @relation(fields: [programId], references: [id])
  week    Week    @relation(fields: [weekId], references: [id])

  programId String
  weekId    Int
  Exercise  Exercise[]
}

model Exercise {
  id               Int     @id
  day              Day     @relation(fields: [dayId], references: [id])
  name             String
  sports           Sport[]
  totalRepetitions Int
  sets             Int
  repsPerSet       Int

  dayId Int
}
